name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  EXTENSION_REPO: mvwestendorp/quarto-review-extension
  EXTENSION_BUNDLE_PATTERN: "quarto-review-extension-.*\\.zip"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Download latest extension bundle
        env:
          TOKEN: ${{ secrets.EXTENSION_BUNDLE_TOKEN }}
        run: |
          API_URL="https://api.github.com/repos/${{ env.EXTENSION_REPO }}/releases/tags/continuous"
          AUTH_HEADER=""
          if [ -n "$TOKEN" ]; then
            AUTH_HEADER="-H Authorization: Bearer $TOKEN"
          fi

          DOWNLOAD_URL=$(
            curl -sL $AUTH_HEADER "$API_URL" |
              jq -r --arg pattern "${{ env.EXTENSION_BUNDLE_PATTERN }}" \
                '.assets[] | select(.name | test($pattern)) | .browser_download_url' |
              head -n 1
          )
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "No bundle matching pattern found in release"
            exit 1
          fi

          curl -L ${TOKEN:+-H "Authorization: Bearer $TOKEN"} -o extension.zip "$DOWNLOAD_URL"
          rm -rf _extensions/web-review
          mkdir -p _extensions
          unzip -o extension.zip -d _extensions
          rm extension.zip

      - name: Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: 'release'

      - name: Render Quarto documents
        run: |
          mkdir -p docs
          quarto render my-document.qmd --output-dir docs --output index.html

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Download latest extension bundle
        env:
          TOKEN: ${{ secrets.EXTENSION_BUNDLE_TOKEN }}
        run: |
          API_URL="https://api.github.com/repos/${{ env.EXTENSION_REPO }}/releases/tags/continuous"
          AUTH_HEADER=""
          if [ -n "$TOKEN" ]; then
            AUTH_HEADER="-H Authorization: Bearer $TOKEN"
          fi

          DOWNLOAD_URL=$(
            curl -sL $AUTH_HEADER "$API_URL" |
              jq -r --arg pattern "${{ env.EXTENSION_BUNDLE_PATTERN }}" \
                '.assets[] | select(.name | test($pattern)) | .browser_download_url' |
              head -n 1
          )
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "No bundle matching pattern found in release"
            exit 1
          fi

          curl -L ${TOKEN:+-H "Authorization: Bearer $TOKEN"} -o extension.zip "$DOWNLOAD_URL"
          rm -rf _extensions/web-review
          mkdir -p _extensions
          unzip -o extension.zip -d _extensions
          rm extension.zip

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
